<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 389;
    protected $actionTableSize = 1061;
    protected $gotoTableSize = 544;

    protected $invalidToken = 154;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 389;
    protected $YYNLSTATES   = 619;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_BOOLEAN_OR = 279;
    const T_BOOLEAN_AND = 280;
    const T_IS_EQUAL = 281;
    const T_IS_NOT_EQUAL = 282;
    const T_IS_IDENTICAL = 283;
    const T_IS_NOT_IDENTICAL = 284;
    const T_IS_SMALLER_OR_EQUAL = 285;
    const T_IS_GREATER_OR_EQUAL = 286;
    const T_SL = 287;
    const T_SR = 288;
    const T_INSTANCEOF = 289;
    const T_INC = 290;
    const T_DEC = 291;
    const T_INT_CAST = 292;
    const T_DOUBLE_CAST = 293;
    const T_STRING_CAST = 294;
    const T_ARRAY_CAST = 295;
    const T_OBJECT_CAST = 296;
    const T_BOOL_CAST = 297;
    const T_UNSET_CAST = 298;
    const T_POW = 299;
    const T_NEW = 300;
    const T_CLONE = 301;
    const T_EXIT = 302;
    const T_IF = 303;
    const T_ELSEIF = 304;
    const T_ELSE = 305;
    const T_ENDIF = 306;
    const T_LNUMBER = 307;
    const T_DNUMBER = 308;
    const T_STRING = 309;
    const T_STRING_VARNAME = 310;
    const T_VARIABLE = 311;
    const T_NUM_STRING = 312;
    const T_INLINE_HTML = 313;
    const T_CHARACTER = 314;
    const T_BAD_CHARACTER = 315;
    const T_ENCAPSED_AND_WHITESPACE = 316;
    const T_CONSTANT_ENCAPSED_STRING = 317;
    const T_ECHO = 318;
    const T_DO = 319;
    const T_WHILE = 320;
    const T_ENDWHILE = 321;
    const T_FOR = 322;
    const T_ENDFOR = 323;
    const T_FOREACH = 324;
    const T_ENDFOREACH = 325;
    const T_DECLARE = 326;
    const T_ENDDECLARE = 327;
    const T_AS = 328;
    const T_SWITCH = 329;
    const T_ENDSWITCH = 330;
    const T_CASE = 331;
    const T_DEFAULT = 332;
    const T_BREAK = 333;
    const T_CONTINUE = 334;
    const T_GOTO = 335;
    const T_FUNCTION = 336;
    const T_CONST = 337;
    const T_RETURN = 338;
    const T_TRY = 339;
    const T_CATCH = 340;
    const T_FINALLY = 341;
    const T_THROW = 342;
    const T_USE = 343;
    const T_INSTEADOF = 344;
    const T_GLOBAL = 345;
    const T_STATIC = 346;
    const T_ABSTRACT = 347;
    const T_FINAL = 348;
    const T_PRIVATE = 349;
    const T_PROTECTED = 350;
    const T_PUBLIC = 351;
    const T_VAR = 352;
    const T_UNSET = 353;
    const T_ISSET = 354;
    const T_EMPTY = 355;
    const T_HALT_COMPILER = 356;
    const T_CLASS = 357;
    const T_TRAIT = 358;
    const T_INTERFACE = 359;
    const T_EXTENDS = 360;
    const T_IMPLEMENTS = 361;
    const T_OBJECT_OPERATOR = 362;
    const T_DOUBLE_ARROW = 363;
    const T_LIST = 364;
    const T_ARRAY = 365;
    const T_CALLABLE = 366;
    const T_CLASS_C = 367;
    const T_TRAIT_C = 368;
    const T_METHOD_C = 369;
    const T_FUNC_C = 370;
    const T_LINE = 371;
    const T_FILE = 372;
    const T_COMMENT = 373;
    const T_DOC_COMMENT = 374;
    const T_OPEN_TAG = 375;
    const T_OPEN_TAG_WITH_ECHO = 376;
    const T_CLOSE_TAG = 377;
    const T_WHITESPACE = 378;
    const T_START_HEREDOC = 379;
    const T_END_HEREDOC = 380;
    const T_DOLLAR_OPEN_CURLY_BRACES = 381;
    const T_CURLY_OPEN = 382;
    const T_PAAMAYIM_NEKUDOTAYIM = 383;
    const T_NAMESPACE = 384;
    const T_NS_C = 385;
    const T_DIR = 386;
    const T_NS_SEPARATOR = 387;
    const T_ELLIPSIS = 388;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,   49,  153,  154,  150,   48,   32,  154,
          148,  149,   46,   43,    7,   44,   45,   47,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,   27,  145,
           37,   13,   39,   26,   61,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,   63,  154,  152,   31,  154,  151,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  146,   30,  147,   51,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   33,   34,   35,   36,   38,   40,   41,   42,   50,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   62,
           64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,  154,  154,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  154,  154,  154,  154,  154,  154,  135,
          136,  137,  138,  139,  140,  141,  142,  143,  144
    );

    protected $action = array(
           59,   60,  400,   61,   62,-32766,-32766,-32766,-32766,   63,
           64,  217,  218,  219,  220,  221,  222,  223,  224,  225,
          226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
          236,-32767,-32767,-32767,-32767,   98,   99,  100,  101,  102,
           57,   65,   66,  286,  237,  343,  344,   67,  270,   68,
          279,  280,   69,   70,   71,   72,   73,   74,   75,   76,
          724,   32,  293,   77,  391,  401,  399,  272,  397,  934,
          935,  435, -119, 1060,  323,  669,  418,  436,   46,   27,
          402,  398,  437,  789,  438,    0,  439,  133,  576,  403,
          395,  535,  314,   37,   38,  404,  409,  405,   39,  440,
           81,  311,   78,  347,  320,  345,  346,   31,  441,  442,
          234,  235,  236,  443,  444,  445,  693,  651,  696,  446,
          447,  424,  886,  124,  448,  449,  237,  940,  941,  942,
          943,  937,  938,  300,   82,   83,   84,  448,  461,  944,
          939,  406,  283,  675,  592,  348,   47, 1047,  320,  309,
          946,  313,   40,  623,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,  102,  103,  104,  105,  515,  294,-32766,  725,-32766,
        -32766,-32766,   53,  623,  213,  214,  215,-32766,  106,  194,
        -32766,-32766,-32766,   36,-32766,  419,-32766,-32766,-32766,-32766,
        -32766,-32766,  204,  239,  216,-32766,-32766,-32766,  900, 1032,
        -32766,-32766,  283,  131,-32766,-32766,-32766,-32766,  460,  770,
          461,  991,  988,  406,  886,-32766,  213,  214,  215, 1029,
           41,  107,  108,  109,  110,  111,  112,  113,  114,  115,
          116,  117,  118,  332,  204, 1062,  216,-32766,  129,  752,
          749,  750,  331,  623,  128,-32766,-32766,-32766,  396, 1047,
        -32766,-32766,-32766,   22,-32766,  120,-32766,  397,-32766,  827,
          829,-32766, -123,  323,  192,-32766,-32766,-32766,  299,-32766,
        -32766,-32766,  789,  666,-32766,  623, 1061,-32766,  460,-32766,
          420,  886,-32766,-32766,-32766,-32766,-32766, 1054,-32766,  397,
        -32766,  328,  130,-32766,  285,  323,  320,-32766,-32766,-32766,
          548,  281,-32766,-32766,  789,  695,-32766,  989,  129,-32766,
          460,  125,  331,  886,  128,-32766,-32766,-32766,  405,  751,
        -32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,  525,  441,
          442, -392, 1060,  273,-32766,  785,-32766,  694,  651,  696,
          446,  447,  623,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,  329,-32766,  195,-32766, 1057,-32766,  946, 1058,
        -32766,-32766,  196,-32766,-32766,-32766,-32766,  685,-32766,-32766,
        -32766,  214,  215,-32766,  623,  215,-32766,  460,-32766,   54,
          886,-32766,-32766,-32766,-32766,-32766,  667,-32766,  204,-32766,
          216,  204,-32766,  216,   35,  282,-32766,-32766,-32766,  119,
          284,-32766,-32766,-32766,-32766,-32766,   56,  780,-32766,  460,
          415,  405,  886,  594,-32766,-32766,-32766,  405,-32766,-32766,
        -32766,  200,  441,  442,  213,  214,  215,  127,  441,  442,
          199,  651,  696,  446,  447,-32766,-32766,  651,  696,  446,
          447,  623,  204,  197,  216,-32766,-32766,-32766,-32766,-32766,
        -32766,  595,-32766,  990,-32766,  886,-32766,  426,   28,-32766,
          602,  238,  121,-32766,-32766,-32766,  888,-32766,-32766,-32766,
          431,  554,-32766,  623,  607,-32766,  460,-32766,  134,  355,
        -32766,-32766,-32766,-32766,-32766,  614,-32766,  886,-32766,  122,
          679,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  216,  991,
        -32766,-32766,-32766,  204,-32766,  216,  132,-32766,  460,  597,
        -32766,  567,  568,-32766,-32766,-32766,  623,  103,  104,  105,
        -32766,  294,  604,-32766,-32766,-32766,  608,-32766,  616,-32766,
          886,-32766,  689,  106,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,  294,-32766,-32766,-32766,-32766,-32766,-32766,  623,  106,
        -32766,  460,-32766,  749,  750,-32766,-32766,-32766,-32766,-32766,
          237,-32766,  886,-32766,  572,  985,-32766,  231,  232,  233,
        -32766,-32766,-32766,  786,  618,-32766,-32766,  774,  613,-32766,
          630,  599,-32766,  460,   50,-32766,   52,  640,  663,-32766,
        -32766,  623,  100,  101,  102,-32766,   55,   58,-32766,-32766,
        -32766,   49,-32766,   51,-32766,  293,-32766, 1060,  414,-32766,
          416, -169,  482,-32766,-32766,-32766,  486,-32766,-32766,-32766,
        -32766,-32766,-32766,  623,  498,-32766,  460,-32766,  499,  580,
        -32766,-32766,-32766,-32766,-32766,  623,-32766,  680,-32766,  624,
          642,-32766,  785,  577,  269,-32766,-32766,-32766,  327,  326,
        -32766,-32766, 1047,  528,-32766,  417,  433,-32766,  460,  413,
        -32766,  697,  289,  659,-32766,-32766,  623,  501,  540,  330,
        -32766,  557,  698,-32766,-32766,-32766, -392,-32766, 1055,-32766,
          559,-32766,  321, -393,-32766, -292,  324, -300,-32766,-32766,
        -32766,  448, 1026,-32766,-32766,  661,-32766,-32766,  208,  209,
        -32766,  460,  312,   81,  210,  322,  211,  310,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,
        -32767,  123,  198,   42,  945,  356,  934,  935,  623,  354,
          334,-32766,  415,  316,  936,  491,   24,  623,-32766,-32766,
          301,-32766,  927, -301,-32766,-32766,-32766,  691,-32766,  395,
        -32766,  126,-32766,  678,  665,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,  601,  910,-32766,-32766,  600,   45,-32766,   44,
          771,-32766,  460,  668,-32766,  662,-32766,-32766,-32766,-32766,
          778,  633,  634,  635,  940,  941,  942,  943,  937,  938,
          382,  636,  670,  405,  660,  461,  944,  939,  406,-32766,
        -32766,-32766,  677,  212,  441,  442,  664,  779,  781,-32766,
        -32766,  708,  710,  651,  696,  446,  447,-32766,  712,-32766,
        -32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,  405,  392,
          654,  719,  718,  727,  671,  308,  656,  430,  617,  441,
          442, 1024,  887,  615,  612,  405,  392,  611,  629,  696,
          446,  447,  308,  610,  605,  603,  441,  442,  598,  593,
          889, 1010,  405,  392, 1022,  629,  696,  446,  447,  308,
          325, 1020, 1030,  441,  442,  763,  925,  632,-32766,-32766,
        -32766,  775,  629,  696,  446,  447, 1053,  325,  797,  798,
          799,  796,  795,  794,  631,  405,-32766,  717,-32766,-32766,
        -32766,-32766,-32766,  716,  325, 1056,  441,  442,  405,  394,
        -32766,  390,  405,  333,  298,  651,  696,  446,  447,  441,
          442,  297,  296,  441,  442,  405,  295,  537,  651,  696,
          446,  447,  651,  696,  446,  447,  441,  442,  278,  274,
          277,  271,  405,  589,  652,  651,  696,  446,  447,  581,
          193,   80,   79,  441,  442,   48,  405,  692,  866,   43,
          405,  787,  651,  696,  446,  447,   34,  441,  442,   33,
           30,  441,  442,  623,  683, 1060,  651,  696,  446,  447,
          651,  696,  446,  447,-32766,-32766,-32766, -443,  331,  405,
          865,  529,   23,    0, -119, -120,  949,  753,  893,  890,
          441,  442,-32766,  587,-32766,-32766,-32766,-32766,  910,  651,
          696,  446,  447,  558,  520,  432,  427,  377,  358,    0,
           25,    0,    0,  884,    0, 1021,  895,  897,  909, 1023,
         1009,  570,  896, 1004, 1005,  894,  950, 1051,  924,    0,
          461,    0,    0,  406,    0,    0,    0,    0,  410,    0,
          320
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,   30,   31,   32,   11,
           12,   29,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           63,   43,   44,   32,   62,   98,   99,   49,  125,   51,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           27,   63,   64,   65,   66,   67,    7,    7,   99,   71,
           72,   73,  149,   75,  105,   77,   27,   79,   80,   81,
           82,    7,   84,  114,   86,    0,   88,  146,   89,   91,
          143,  150,   78,   95,   96,   97,   98,   98,  100,  101,
          146,  124,  104,    7,  150,  107,  108,    7,  109,  110,
           46,   47,   48,  115,  116,  117,  147,  118,  119,  120,
          121,    7,   12,  146,  126,  127,   62,  129,  130,  131,
          132,  133,  134,  135,    8,    9,   10,  126,  140,  141,
          142,  143,   32,  145,  146,    7,  148,   78,  150,  151,
          136,  153,   26,   73,   28,   29,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   73,   50,   67,  145,    8,
            9,   10,   63,   73,    8,    9,   10,   77,   62,    7,
           80,   81,   82,    7,   84,  146,   86,   26,   88,   28,
           29,   91,   26,   27,   28,   95,   96,   97,  149,  149,
          100,  101,   32,   63,  104,    8,    9,  107,  108,  145,
          140,  119,  153,  143,   12,  115,    8,    9,   10,   73,
           13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
           23,   24,   25,    7,   26,   73,   28,   67,  146,  149,
          127,  128,  150,   73,  144,  145,  146,   77,    7,   78,
           80,   81,   82,  149,   84,  146,   86,   99,   88,   52,
           53,   91,  149,  105,   63,   95,   96,   97,    7,   67,
          100,  101,  114,  145,  104,   73,   74,  107,  108,   77,
            7,   12,   80,   81,   82,  115,   84,  147,   86,   99,
           88,   63,  146,   91,    7,  105,  150,   95,   96,   97,
           78,   32,  100,  101,  114,  147,  104,  136,  146,  107,
          108,    7,  150,   12,  144,  145,  146,  115,   98,  149,
           29,   30,   31,   32,   33,   34,   35,   36,  127,  109,
          110,  124,   75,   32,    8,   73,   67,  147,  118,  119,
          120,  121,   73,    8,    9,   10,   77,  145,  146,   80,
           81,   82,  124,   84,   13,   86,   73,   88,  136,   76,
           91,   26,   13,   28,   95,   96,   97,  147,   67,  100,
          101,    9,   10,  104,   73,   10,  107,  108,   77,   63,
           12,   80,   81,   82,  115,   84,  145,   86,   26,   88,
           28,   26,   91,   28,  137,  138,   95,   96,   97,   13,
           32,  100,  101,   29,   30,  104,   63,  145,  107,  108,
          143,   98,   12,  146,  145,  146,  115,   98,    8,    9,
           10,   13,  109,  110,    8,    9,   10,   27,  109,  110,
           13,  118,  119,  120,  121,   67,   26,  118,  119,  120,
          121,   73,   26,   13,   28,   77,  145,  146,   80,   81,
           82,   27,   84,   73,   86,   12,   88,   68,   69,   91,
          147,   27,  146,   95,   96,   97,  147,   67,  100,  101,
           68,   69,  104,   73,   27,  107,  108,   77,   93,   94,
           80,   81,   82,  115,   84,   27,   86,   12,   88,  146,
           27,   91,    8,    9,   10,   95,   96,   97,   28,  119,
          100,  101,   29,   26,  104,   28,   27,  107,  108,   27,
           67,  102,  103,  145,  146,  115,   73,   46,   47,   48,
           77,   50,   27,   80,   81,   82,   27,   84,   27,   86,
           12,   88,   32,   62,   91,   29,   30,   31,   95,   96,
           97,   50,   67,  100,  101,  145,  146,  104,   73,   62,
          107,  108,   77,  127,  128,   80,   81,   82,  115,   84,
           62,   86,   12,   88,   70,  149,   91,   43,   44,   45,
           95,   96,   97,  145,  146,  100,  101,  145,  146,  104,
          145,  146,  107,  108,   63,   67,   63,   73,  145,  146,
          115,   73,   43,   44,   45,   77,   63,   63,   80,   81,
           82,   63,   84,   63,   86,   64,   88,   75,   73,   91,
           73,   75,   73,   95,   96,   97,   73,   67,  100,  101,
          145,  146,  104,   73,   73,  107,  108,   77,   73,   73,
           80,   81,   82,  115,   84,   73,   86,   73,   88,   73,
           73,   91,   73,   75,   90,   95,   96,   97,   78,   78,
          100,  101,   78,   90,  104,   82,   98,  107,  108,   98,
           67,  119,   90,  145,  146,  115,   73,   90,   92,  122,
           77,   92,  119,   80,   81,   82,  124,   84,  147,   86,
          105,   88,  122,  124,   91,  139,  106,  139,   95,   96,
           97,  126,  147,  100,  101,  145,  146,  104,   43,   44,
          107,  108,  124,  146,   49,  123,   51,  124,  115,   29,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,  125,  125,  125,  136,  139,   71,   72,   73,  139,
          139,   67,  143,  139,   79,  143,  149,   73,  145,  146,
          139,   77,  149,  139,   80,   81,   82,  144,   84,  143,
           86,  146,   88,  145,  145,   91,    8,    9,   10,   95,
           96,   97,  145,  108,  100,  101,  145,  145,  104,  145,
          145,  107,  108,  145,   26,  145,   28,   29,   30,  115,
          145,  145,  145,  145,  129,  130,  131,  132,  133,  134,
          135,  145,  145,   98,  145,  140,  141,  142,  143,    8,
            9,   10,  145,  148,  109,  110,  145,  145,  145,  145,
          146,  145,  145,  118,  119,  120,  121,   26,  145,   28,
           29,   30,   31,   32,   33,   34,   35,   36,   98,   99,
          145,  145,  145,  145,  145,  105,  145,  147,  146,  109,
          110,  147,  147,  146,  146,   98,   99,  146,  118,  119,
          120,  121,  105,  146,  146,  146,  109,  110,  146,  146,
          149,  147,   98,   99,  147,  118,  119,  120,  121,  105,
          140,  147,  147,  109,  110,  147,  147,  147,    8,    9,
           10,  147,  118,  119,  120,  121,  147,  140,  108,  109,
          110,  111,  112,  113,  147,   98,   26,  147,   28,   29,
           30,   31,   32,  147,  140,  147,  109,  110,   98,  148,
          148,  148,   98,  148,  148,  118,  119,  120,  121,  109,
          110,  148,  148,  109,  110,   98,  148,   83,  118,  119,
          120,  121,  118,  119,  120,  121,  109,  110,  148,  150,
          148,  148,   98,   85,  147,  118,  119,  120,  121,   87,
          148,  148,  148,  109,  110,  148,   98,  147,  149,  148,
           98,  147,  118,  119,  120,  121,  148,  109,  110,  148,
          148,  109,  110,   73,  147,   75,  118,  119,  120,  121,
          118,  119,  120,  121,    8,    9,   10,  148,  150,   98,
          149,  149,  149,   -1,  149,  149,  149,  149,  149,  149,
          109,  110,   26,  149,   28,   29,   30,   31,  108,  118,
          119,  120,  121,  149,  149,  149,  149,  149,  149,   -1,
          149,   -1,   -1,  151,   -1,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,   -1,
          140,   -1,   -1,  143,   -1,   -1,   -1,   -1,  148,   -1,
          150
    );

    protected $actionBase = array(
            0,  740,  757,  774,  807,  323,  854,   -1,  872,  820,
          705,  230,  329,  868,  837,  824,  901,  901,  901,  901,
          901,  492,  505,  509,  511,  509,  434,   -2,   -2,   -2,
          180,  110,  279,  279,  603,  212,  279,  528,  560,  453,
          410,  311,  378,  485,  485,  485,  485,  674,  674,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
          485,  485,  485,  485,  485,   33,  657,  606,  608,  659,
          640,  671,  667,  721,  564,  819,  749,  555,  489,  704,
          724,  727,  739,  738,  700,  735,  889,  734,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  426,
          176,  336,  218,  207,  372,  494,  494,  494,  494,  494,
          494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
          494,  375,  211,  211,  211,  211,  211,  211,  211,  211,
          211,  420,  420,  487,  444,  345,  480,  480,  665,  665,
          665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
          665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
          665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
          171,  -18,  758,  483,  986,  384,  880,  801,  801,  801,
          801,  516,  -24,  301,  301,  301,  301,  217,   -6,   -6,
           -6,   -6,  690,  690,  690,  690,  168,  200,  -31,   11,
           11,  575,  575,  551,  615,  559,  559,  910,  910,  910,
          910,  910,  910,  910,  910,  910,  910,  910,  910,  579,
          546,  534,  534,  772,  772,  123,  123,  123,  123,  436,
           14,  102,  181,   69,  481,  481,  481,  744,  -53,  581,
          156,  156,  156,  580,  598,  584,  172,   64,   64,   64,
          -46,   80,   80,   80,   80,  277,  267,  267,  293,   80,
           80,  -59,   80,   80,   80,  326,  586,  766,  589,  760,
          442,  614,  -23,  616,  616,  799,  571,  616,  799,  399,
          412,  419,  556,   49,  848,   33,  390,  272,  438,  353,
          501,  638,  565,  656,  646,  138,  251,  238,  445,  119,
          114,  647,  648,  852,  851,   60,  150,  569,  501,  501,
          501,  100,  232,  119,  -77,  635,   74,   59,  645,  542,
          510,  828,  549,  832,  561,  572,  542,  549,  542,  510,
          817,  817,  817,  817,  574,  510,  572,  832,  832,  510,
          551,  832,  186,  510,  570,  572,  557,  817,  631,  627,
          549,  592,  832,  832,  561,  510,  817,  585,  613,  182,
          832,  817,  585,  510,   85,  473,  548,  821,  814,  771,
          723,  552,  563,  802,  800,  813,  553,  545,  803,  831,
          602,  619,  547,  396,  531,  550,  533,  611,  543,  593,
          571,  599,  497,  497,  497,  562,  604,  562,  497,  497,
          497,  497,  497,  497,  497,  497,  893,  600,  558,  588,
          583,  618,  351,  602,  587,  359,  722,  602,  860,  878,
          882,  576,  788,  875,  562,  890,  634,  314,  440,  784,
          573,  524,  562,  783,  562,  719,  562,  859,  768,  602,
          497,  858,  884,  885,  886,  849,  887,  888,  892,  883,
          544,  896,  701,  877,  271,  812,  556,  596,  577,  699,
          236,  895,  562,  562,  718,  567,  562,  698,  632,  853,
          697,  874,  508,  508,  508,  508,  607,  894,  598,  876,
          562,  568,  891,  236,  457,  504,  856,  696,  717,  773,
          711,  578,  857,  508,  508,  508,  508,  775,  708,  427,
          541,  468,  695,  597,  881,  855,  683,  418,  707,  566,
          776,  677,  562,  864,  601,  590,  582,  702,  879,  676,
          673,  672,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,    0,    0,    0,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,  126,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  -18,  -18,
          126,  -18,  126,  -18,  126,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
          -18,  665,  665,  665,  665,  665,  665,  665,  665,  665,
          126,  126,  -18,  665,  126,  -18,  -18,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
            0,  126,  -18,  126,  -18,  126,  126,  126,  126,  126,
          -18,  -18,  -18,  -18,  -18,  -18,    0,  481,  481,  481,
          481,  -18,  -18,  -18,  -18,  790,  790,  790,  910,  910,
          910,  910,  910,  910,  481,  481,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  790,  790,
           64,   64,  910,  910,   80,   80,   80,   80,   80,  267,
          542,  267,  267,    0,    0,    0,   80,  572,  267,  542,
          542,  542,  267,  267,  267,  542,    0,    0,    0,  542,
            0,    0,    0,    0,  572,    0,    0,  542,    0,    0,
          542,    0,    0,    0,  832,  395,  395,  395,  395,  236,
          119,    0,  572,  572,  542,  542,  572,  542,    0,    0,
            0,  832,    0,  542,    0,    0,    0,    0,    0,  497,
          314,  788,  283,   96,    0,    0,    0,    0,    0,    0,
           96,   96,  297,  297,    0,    0,  544,  497,  497,  497,
            0,    0,    0,    0,  283,    0,    0,  236
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  112,  104,  118,  103,
          114,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  419,  419,32767,32767,  376,32767,32767,32767,
        32767,32767,32767,  187,  187,  187,32767,32767,32767,  408,
          408,  408,  408,  408,  408,  408,  408,  408,  408,32767,
        32767,32767,32767,32767,  267,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  272,  424,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  248,  249,
          251,  252,  186,  409,  137,  273,  423,  185,  139,32767,
        32767,  214,  329,  216,  337,  266,  215,  191,  196,  197,
          198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
          190,  339,  373,  373,  376,32767,32767,32767,32767,32767,
        32767,  245,  244,  338,32767,  212,  365,  364,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          213,  335,  217,  336,  219,  340,  218,  235,  236,  233,
          234,  342,  341,  358,  359,  356,  357,  189,  237,  238,
          239,  240,  360,  361,  362,  363,  171,  171,  171,32767,
        32767,  418,  418,32767,32767,  226,  227,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          172,  349,  350,  302,  302,  128,  128,  128,  128,  128,
        32767,32767,32767,32767,  221,  222,  220,32767,32767,  310,
        32767,32767,32767,32767,32767,  312,32767,  344,  345,  343,
        32767,32767,32767,32767,32767,32767,  311,32767,32767,32767,
        32767,32767,32767,32767,32767,  381,32767,32767,32767,32767,
        32767,  394,  298,32767,32767,32767,  291,32767,32767,  115,
          117,   65,  328,32767,32767,32767,32767,32767,32767,  399,
          231,32767,32767,32767,32767,32767,32767,  431,32767,  394,
        32767,32767,32767,32767,32767,32767,32767,  243,  223,  224,
          225,32767,32767,  398,  392,32767,32767,32767,32767,32767,
           69,  307,32767,  313,32767,32767,32767,32767,32767,   69,
        32767,32767,32767,32767,32767,   69,32767,  397,  396,   69,
        32767,  292,  375,   69,   82,32767,   80,32767,  101,  101,
        32767,   84,32767,  387,32767,   69,32767,  280,   71,  375,
        32767,32767,  280,   69,32767,    4,  317,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          293,32767,32767,32767,  263,  264,  383,32767,  384,32767,
          291,32767,  229,  230,  232,  209,32767,  211,  253,  254,
          255,  256,  257,  258,  259,  261,32767,32767,  296,  299,
        32767,32767,32767,    6,   20,  147,32767,  294,32767,  194,
        32767,32767,32767,32767,  426,32767,32767,  188,32767,32767,
           22,32767,  143,32767,   67,32767,  416,32767,  392,  295,
          228,32767,32767,32767,32767,  371,32767,32767,32767,32767,
          393,32767,32767,32767,  122,32767,  328,32767,32767,32767,
           83,32767,  192,  138,32767,32767,  425,32767,32767,32767,
        32767,32767,  352,  353,  354,  355,  380,32767,32767,32767,
           68,32767,32767,   85,32767,32767,  392,32767,32767,32767,
        32767,32767,32767,  346,  347,  348,  351,32767,32767,  183,
        32767,32767,32767,32767,32767,  392,32767,  126,32767,32767,
        32767,32767,  284,  392,  165,  164,32767,32767,32767,32767,
        32767,32767,   28,   28,    3,   28,  109,   28,  150,    3,
          101,  101,   62,  150,   28,  150,   28,   28,   28,   28,
           28,   28,   28,  157,   28,   28,   28,   28,   28
    );

    protected $goto = array(
          164,  164,  138,  138,  143,  146,  138,  139,  140,  141,
          148,  177,  166,  162,  162,  162,  162,  143,  143,  163,
          163,  163,  163,  163,  163,  163,  163,  163,  163,  158,
          159,  160,  161,  175,  137,  462,  463,  360,  464,  468,
          469,  470,  471,  472,  473,  474,  475,  814,  142,  144,
          145,  147,  171,  173,  176,  205,  240,  242,  244,  246,
          247,  248,  249,  250,  258,  259,  260,  261,  275,  276,
          304,  305,  306,  378,  379,  380,  510,  178,  179,  180,
          181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
          149,  150,  151,  165,  152,  167,  153,  201,  168,  154,
          155,  156,  202,  157,  135,  526,  526,  526,  526,  526,
          526,  526,  526,  526,  627,  627,  627,  526,  628,  628,
          628,  526,  526,  526,  526,  526,  526,  526,  526,  526,
          526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
          526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
          526,  526,  526,  466,  466,  466,  466,  466,  466,  538,
          573,  466,  466,  466,  466,  466,  466,  466,  466,  466,
          466,  466,  466,  740,  740, 1036, 1036,  477,  477,  267,
          489,  268,  411,  411,  411,  411,  411,  411,  673,  368,
          411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
          411,  411,  541,  549,  588,  755,  911,  911,  748,  748,
          748,  748,  748,  384,  575,  506,  506,  532,  502,  507,
          584,  504,  504,  465,  467,  494,  508,  533,  536,  550,
          556,  582,  583,    1,  705,  705,  705,  705,    2, 1040,
          511,  361, 1052,  700,  488,  706,  288,  782,  527,  527,
          527,  527,  527,  527,  527,  527,  527,  488,  488,  500,
          527,  553,  340,  388,  527,  527,  527,  527,  527,  527,
          527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
          527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
          527,  527,  527,  527,  527,  527,  951,  951,  951,  951,
          951,  951,  951,  951,  951,  315,  357,  793,  951,  303,
          337,  562,  951,  951,  951,  951,  951,  951,  951,  951,
          951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
          951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
          951,  951,  951,  951, 1016, 1016,  996,  170,  574,  478,
          478,  542,  543,  544,  545,  169,  174,  191,  203,  241,
          243,  245,  251,  252,  253,  254,  255,  256,  262,  263,
          264,  265,  291,  292,  317,  318,  319,  563,  564,  565,
          566,  206,  207,  367, 1019,  367,  367,  479,  479,  374,
         1008, 1033,  367,  923,  922,  860,  367,  367,  367, 1019,
          637,    5,  744,   16,  606,    6,  812,  371,  372,  367,
          367, 1059,    7,  759,   17,   18,    8,   19,    9,   10,
           11,  764,   20,   12,   13,   14,   15,  952,  761,  485,
          483,  761,  626,  626,  626,  385,  591, 1019,  512,  513,
          514,  516,  517,  518,  519,  521,  552,  483,  933,  902,
          801,  643,  726,  711,  709,  707,  709,  596,  480,  735,
          730,  714,  907,  908,  928,  483,  483,  578,  993,  483,
         1015, 1015,  569,  869,   26,   21,  353,  905, 1007,  485,
            0,  569, 1046, 1046,    0,  906,    0, 1031, 1031, 1031,
          522,  338,  339,    0, 1049, 1046,    0, 1014,    0,   29,
            0,    0,    0,    0,  571,    0, 1049, 1049,  645,  767,
          715,  998,  803,  746,  362,    0,    0,  483,  492,  369,
          369,  369,  503,    0,    0,    0,    0,    0,  487,  369,
            0,    0,    0,    0,  428,    0,    0,  509,    0,    0,
          383,    0,  579,  493
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   40,   40,   40,   40,   40,
           40,   40,   40,   40,    7,    7,    7,   40,    8,    8,
            8,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   40,   94,   94,   94,   94,   94,   94,   22,
           22,   94,   94,   94,   94,   94,   94,   94,   94,   94,
           94,   94,   94,   56,   56,   56,   56,   94,   94,   47,
           80,   47,   40,   40,   40,   40,   40,   40,   32,    5,
           40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   43,   43,   43,   62,   40,   40,   40,   40,
           40,   40,   40,   33,   33,   33,   33,   33,   33,   88,
           40,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   33,   33,    2,   40,   40,   40,   40,    2,  120,
           26,   29,   40,   40,   26,   40,   40,   40,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   26,   26,    5,
           98,   49,   49,   49,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  104,   76,   76,  105,  104,
           51,  107,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,   96,   96,  112,  106,   31,   98,
           98,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,   64,   64,   64,   64,  101,  101,   30,
           60,  118,   64,  103,  103,   81,   64,   64,   64,   64,
           11,   14,   58,   14,   53,   14,   80,    9,    9,   64,
           64,   64,   14,   63,   14,   14,   14,   14,   14,   14,
           14,   65,   14,   14,   14,   14,   14,  108,   64,   64,
            4,   64,    6,    6,    6,   10,   77,   64,   89,   89,
           89,   89,   89,   89,   89,   89,   89,    4,   60,   92,
           79,   12,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   50,   60,   60,   16,    4,    4,   87,  111,    4,
           97,   97,   64,   16,   16,   16,   16,   60,   60,   64,
           -1,   64,  121,  121,   -1,   60,   -1,   97,   97,   97,
           16,   51,   51,   -1,  121,  121,   -1,   97,   -1,   16,
           -1,   -1,   -1,   -1,   16,   -1,  121,  121,   13,   13,
           13,   13,   13,   13,   41,   -1,   -1,    4,   41,  102,
          102,  102,   41,   -1,   -1,   -1,   -1,   -1,    4,  102,
           -1,   -1,   -1,   -1,   41,   -1,   -1,    4,   -1,   -1,
          102,   -1,   41,   80
    );

    protected $gotoBase = array(
            0,    0, -361,    0,  122, -136,  431,  113,  117,   64,
           38,   53,   31,  313, -192,    0,   73,    0,    0,    0,
            0,    0,  115,    0,    0,  -30,  210,    0,    0,  195,
          111,   78,  163,  -56,    0,    0,    0,    0,    0,    0,
          -87,  109,    0,  -94,    0,    0,    0, -424,    0,  -61,
           37, -109,    0,   49,    0,    0,  -96,    0,  103,    0,
           55,    0,  174,   65,   83,   25,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   17,   79,    0,   52,
          133,  101,    0,    0,    0,    0,    0,   35,  186,  388,
            0,    0,   50,    0, -116,    0,   51,  177,   56,    0,
            0,   94,  209,   82,   -4,  104,  143,  118,   71,    0,
            0,   39,  152,    0,    0,    0,    0,    0,  119,    0,
          203,  180,    0,    0
    );

    protected $gotoDefault = array(
        -32768,  434,    3,  621,  450,  484,  648,  649,  650,  364,
          363,  638,  644,  546,    4,  646,  861,  349,  653,  350,
          555,  655,  496,  657,  658,  136,  451,  365,  366,  497,
          373,  539,  672,  257,  370,  674,  351,  676,  481,  682,
          352,  287,  561,  523,  452,  421,  534,  266,  505,  530,
          713,  336,  721,  609,  729,  732,  453,  524,  743,  425,
          904,  381,  754,  760, 1025,  765,  768,  389,  386,  551,
          772,  773,  307,  777,  585,  586,  792,  590,  290,  800,
          813,  393,  879,  881,  454,  455,  490,  560,  476,  495,
          898,  387,  901,  456,  457,  422,  407,  408,  919,  916,
          342, 1001,  341,  423,  302,  986,  172,  547,  987,  953,
          429, 1039,  997,  335,  458,  459,  359,  375, 1034,  412,
         1041, 1048,  531,  376
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   38,   36,   36,   39,   37,   37,   30,   30,   41,
           41,   42,   42,    7,    8,    8,    8,   44,   44,   44,
           45,   45,   48,   48,   46,   46,   49,   49,   23,   23,
           32,   32,   35,   35,   34,   34,   50,   24,   24,   24,
           24,   51,   51,   52,   52,   53,   53,   21,   21,   17,
           17,   54,   19,   19,   55,   18,   18,   20,   20,   31,
           31,   31,   43,   43,   57,   57,   58,   58,   59,   59,
           59,   59,   60,   60,   60,   61,   61,   62,   62,   62,
           27,   27,   63,   63,   63,   28,   28,   65,   65,   47,
           47,   66,   66,   66,   66,   71,   71,   72,   72,   73,
           73,   73,   73,   74,   75,   75,   77,   70,   70,   67,
           67,   69,   69,   78,   78,   76,   76,   76,   76,   76,
           76,   68,   68,   79,   79,   29,   29,   22,   22,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           16,   16,   26,   26,   84,   84,   85,   85,   85,   80,
           87,   87,   91,   91,   92,   93,   93,   93,   93,   93,
           93,   98,   98,   40,   40,   40,   81,   81,   99,   99,
           94,   94,  100,  100,  100,  100,  100,   82,   82,   82,
           86,   86,   86,   90,   90,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,   13,
           13,   13,  106,  106,  106,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,  109,  109,   83,   83,   83,
           83,  108,  108,  107,  107,  111,  111,  110,  110,  112,
          112,   33,   33,   33,   33,  114,  114,  113,  113,  113,
          113,  113,  115,  115,   97,   97,  101,  101,   96,   96,
          116,  116,  116,  116,  102,  102,  102,  102,   89,   89,
          103,  103,  103,   56,  117,  117,  118,  118,  118,   88,
           88,  119,  119,  120,  120,  120,  120,  104,  104,  104,
          104,  121,  121,  121,  121,  121,  121,  121,  122,  122,
          122,   64,  123,   95
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    1,    0,    2,    8,    0,    4,    1,    3,    0,
            1,    0,    1,    9,    7,    6,    5,    1,    2,    2,
            0,    2,    0,    2,    0,    2,    1,    3,    1,    4,
            1,    4,    1,    4,    1,    3,    3,    3,    4,    4,
            5,    0,    2,    4,    3,    1,    1,    1,    4,    0,
            2,    3,    0,    2,    4,    0,    2,    0,    3,    1,
            2,    1,    1,    0,    1,    3,    4,    6,    0,    1,
            1,    1,    2,    3,    3,    1,    3,    1,    2,    2,
            3,    1,    1,    2,    4,    3,    1,    1,    3,    2,
            0,    3,    3,    8,    3,    1,    3,    0,    2,    4,
            5,    4,    4,    3,    1,    1,    1,    1,    3,    1,
            1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
            1,    1,    3,    1,    3,    3,    1,    0,    1,    1,
            3,    3,    4,    4,    1,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    2,    2,
            2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    1,    3,    5,    4,    4,    4,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    1,    1,    1,    3,    2,    1,    9,   10,
            3,    3,    2,    4,    4,    3,    4,    4,    4,    3,
            0,    4,    1,    3,    2,    2,    4,    6,    2,    2,
            4,    1,    1,    1,    2,    3,    1,    1,    1,    1,
            1,    1,    0,    3,    3,    4,    4,    0,    2,    1,
            0,    1,    1,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    3,    2,    1,    1,
            4,    3,    1,    3,    1,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    5,    4,    3,    1,    3,    3,
            3,    1,    1,    0,    2,    0,    1,    3,    1,    3,
            1,    1,    1,    1,    1,    6,    4,    3,    4,    2,
            4,    4,    1,    3,    1,    2,    1,    1,    4,    1,
            3,    6,    4,    4,    4,    4,    1,    4,    0,    1,
            1,    3,    1,    4,    3,    1,    1,    1,    0,    0,
            2,    3,    1,    3,    1,    4,    2,    2,    2,    1,
            2,    1,    4,    3,    3,    3,    6,    3,    1,    1,
            1,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = Node\Stmt\Namespace_::postprocess($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = new Node\Stmt\Expr($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule62($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule63($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule64($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], $this->semStack[$this->stackPos-(8-4)], $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule67($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule68($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule69($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(9-3)], array('byRef' => $this->semStack[$this->stackPos-(9-2)], 'params' => $this->semStack[$this->stackPos-(9-5)], 'stmts' => $this->semStack[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule80($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule86($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule87($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule88($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule91($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule94($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule95($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule96($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule99($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule101($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule102($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule103($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule104($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule107($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule108($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule109($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule110($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule111($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule112($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule113($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule114($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule117($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule124($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule125($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule126($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule129($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule136($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule137($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule138($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule140($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule141($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule142($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule143($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule146($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule147($attributes) {
         $this->semValue = new Node\Stmt\StaticVar($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = new Node\Stmt\StaticVar($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule149($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule150($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule151($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule152($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(8-4)], array('type' => $this->semStack[$this->stackPos-(8-1)], 'byRef' => $this->semStack[$this->stackPos-(8-3)], 'params' => $this->semStack[$this->stackPos-(8-6)], 'stmts' => $this->semStack[$this->stackPos-(8-8)]), $attributes); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule156($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule160($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule165($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule175($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule180($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule182($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule183($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule185($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule186($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule188($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule191($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\Cast\Int($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Cast\String($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Cast\Object($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(9-2)], 'params' => $this->semStack[$this->stackPos-(9-4)], 'uses' => $this->semStack[$this->stackPos-(9-6)], 'stmts' => $this->semStack[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(10-3)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'uses' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule283($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = new Node\Expr\ClosureUse($this->semStack[$this->stackPos-(2-2)], $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule286($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule287($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule288($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule289($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule291($attributes) {
         $this->semValue = new Node\Name('static', $attributes); 
    }

    protected function reduceRule292($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule297($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule298($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule303($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = array(Node\Scalar\String::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule312($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule314($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule315($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule320($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\String('', $attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule369($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule370($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule372($attributes) {
         $this->semValue = new Node\Name('class', $attributes); 
    }

    protected function reduceRule373($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule374($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule375() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule376() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule377($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule378($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule379($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule380($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule381($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule382($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule385($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule386($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule387($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule414($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule417($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule418($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule419($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule421($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule424($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule425($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule426($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule427($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule428($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule430($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule431($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule432($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(4-1)], $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule433($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(3-1)], $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule438($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = new Node\Name(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }
}
